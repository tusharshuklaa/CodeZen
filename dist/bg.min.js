var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var CodeZen;
(function (CodeZen) {
    var Bg;
    (function (Bg) {
        Bg._SCHEME = "https://", Bg._HOST = "codepen.io", Bg.FRAME_URL = Bg._SCHEME + "s." + Bg._HOST + "/", Bg.EXT_NAME = "CodeZen", Bg.URL = Bg._SCHEME + Bg._HOST + "/";
        var handleDeclarativeContent = function () {
            chrome.declarativeContent.onPageChanged.removeRules(undefined, function () {
                chrome.declarativeContent.onPageChanged.addRules([{
                        conditions: [new chrome.declarativeContent.PageStateMatcher({
                                pageUrl: {
                                    hostEquals: Bg._HOST
                                    // queryContains: "editors",
                                    // pathContains: "pen"
                                }
                            })],
                        actions: [new chrome.declarativeContent.ShowPageAction()]
                    }]);
            });
        };
        var setDefaults = function () {
            // chrome.storage.sync.set(_DEFAULT_SETTING, function () {
            //   console.log("DEFAULT SETTING: ", _DEFAULT_SETTING);
            // });
        };
        // Exports
        /**
         * Init function that runs when application is installed
         *
        */
        Bg.init = function () {
            handleDeclarativeContent();
            setDefaults();
            CodeZen.Bg.Cm.create();
        };
        /**
         * Runs when page navigation has taken place
         *
         */
        Bg.pageNavigated = function () {
            // alert("Welcome to CodePen! You can use the Code Pen Tools now!");
            // createContextMenus();
        };
    })(Bg = CodeZen.Bg || (CodeZen.Bg = {}));
})(CodeZen || (CodeZen = {}));
var CodeZen;
(function (CodeZen) {
    var Bg;
    (function (Bg) {
        // Handles code that runs on extension installation
        chrome.runtime.onInstalled.addListener(function () {
            Bg.init();
        });
        // Handles code that runs on web navigation
        chrome.webNavigation.onCompleted.addListener(function () {
            Bg.pageNavigated();
        }, {
            url: [{
                    urlMatches: Bg.URL
                }]
        });
        chrome.tabs.onActivated.addListener(function (activeInfo) {
            Bg.activeTabId = activeInfo.tabId;
        });
    })(Bg = CodeZen.Bg || (CodeZen.Bg = {}));
})(CodeZen || (CodeZen = {}));
// TODO:
// Update context menu about current editor view on every web navigation within codepen
// Declarative content should not be exclusive to codepen so as to view favs and go to codepen from any page
/// <reference path="../dto/codezen.ts" />
var CodeZen;
(function (CodeZen) {
    var Bg;
    (function (Bg) {
        var Cm;
        (function (Cm) {
            var ContextMenuItemType;
            (function (ContextMenuItemType) {
                ContextMenuItemType["normal"] = "normal";
                ContextMenuItemType["checkbox"] = "checkbox";
                ContextMenuItemType["radio"] = "radio";
                ContextMenuItemType["separator"] = "separator";
            })(ContextMenuItemType = Cm.ContextMenuItemType || (Cm.ContextMenuItemType = {}));
            var ContextType;
            (function (ContextType) {
                ContextType["all"] = "all";
                ContextType["page"] = "page";
                ContextType["frame"] = "frame";
                ContextType["selection"] = "selection";
                ContextType["link"] = "link";
                ContextType["editable"] = "editable";
                ContextType["image"] = "image";
                ContextType["video"] = "video";
                ContextType["audio"] = "audio";
                ContextType["launcher"] = "launcher";
                ContextType["browser_action"] = "browser_action";
                ContextType["page_action"] = "page_action";
            })(ContextType = Cm.ContextType || (Cm.ContextType = {}));
            // These are the context menus available on the page
            // ID and Key name has to be same
            var _CONTEXT_MENUS = {
                "modes": {
                    "id": "mode",
                    "title": "Mode",
                    "children": [{
                            "id": "normal",
                            "title": "Normal",
                            "type": ContextMenuItemType.radio,
                            "checked": true
                        },
                        {
                            "id": "zen",
                            "title": "Zen",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "focus",
                            "title": "Focus",
                            "type": ContextMenuItemType.radio
                        }]
                },
                "view": {
                    "id": "changeView",
                    "title": "Change View",
                    "children": [{
                            "id": "pen",
                            "title": "Editor",
                            "type": ContextMenuItemType.radio,
                            "checked": true
                        }, {
                            "id": "details",
                            "title": "Details",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "fullPage",
                            "title": "Full Page",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "debug",
                            "title": "Debug",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "live",
                            "title": "Live (PRO)",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "collab",
                            "title": "Collab (PRO)",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "professor",
                            "title": "Professor (PRO)",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "presentation",
                            "title": "Presentation (PRO)",
                            "type": ContextMenuItemType.radio
                        }]
                },
                "layout": {
                    "id": "layout",
                    "title": "Change Layout",
                    "children": [{
                            "id": "toLeft",
                            "title": "Left",
                            "type": ContextMenuItemType.radio,
                            "checked": true
                        }, {
                            "id": "toTop",
                            "title": "Top",
                            "type": ContextMenuItemType.radio
                        }, {
                            "id": "toRight",
                            "title": "Right",
                            "type": ContextMenuItemType.radio
                        }]
                },
                "fav": {
                    "id": "fav",
                    "title": "Add to Favourites"
                }
            }, _CONTEXT_MENUS_CONTEXT = [ContextType.all];
            var createCm = function () {
                var _loop_1 = function (m) {
                    var menu = JSON.parse(JSON.stringify(_CONTEXT_MENUS[m]));
                    if (_CONTEXT_MENUS.hasOwnProperty(m) && typeof menu === "object") {
                        _updateContextMenuConfig(menu);
                        if (menu.children) {
                            var children = menu.children, _menu = __rest(menu, ["children"]);
                            _menu.documentUrlPatterns = [Bg.URL + "*/pen/*", Bg.FRAME_URL + "*"];
                            _createMenu(_menu);
                            children.forEach(function (c) {
                                _createSubMenus(JSON.parse(JSON.stringify(c)), menu);
                            });
                        }
                        else {
                            _createMenu(menu);
                        }
                    }
                };
                for (var m in _CONTEXT_MENUS) {
                    _loop_1(m);
                }
            };
            var _createMenu = function (menu) {
                chrome.contextMenus.create(menu);
            };
            var _updateContextMenuConfig = function (menu) {
                menu.id = Bg.EXT_NAME + menu.id;
                menu.contexts = _CONTEXT_MENUS_CONTEXT;
                menu.documentUrlPatterns = [Bg.URL + "*", Bg.FRAME_URL + "*"];
                menu.targetUrlPatterns = [Bg.URL + "*", Bg.FRAME_URL + "*"];
            };
            var _createSubMenus = function (c, menu) {
                c.parentId = menu.id;
                c.id = menu.id + "_-_" + c.id;
                c.contexts = _CONTEXT_MENUS_CONTEXT;
                c.targetUrlPatterns = [Bg.URL + "*", Bg.FRAME_URL + "*"];
                c.documentUrlPatterns = [Bg.URL + "*/pen/*", Bg.FRAME_URL + "*"];
                _createMenu(c);
            };
            var _sendModeRequest = function (mode) {
                chrome.tabs.query({
                    active: true,
                    currentWindow: true
                }, function (tabs) {
                    if (tabs && tabs.length) {
                        Bg.activeTabId = tabs[0].id;
                    }
                    sendMsgToTab(mode);
                });
            };
            var sendMsgToTab = function (mode) {
                if (Bg.activeTabId) {
                    chrome.tabs.sendMessage(Bg.activeTabId, {
                        _czMode: mode
                    }, function (response) {
                        // console.log(mode + "mode request was sent and current status is -> ", response.status);
                    });
                }
                else {
                    throw "There is no active tab (" + Bg.activeTabId + ")!! Strange but true :(";
                }
            };
            var _initCmHandlers = function () {
                chrome.contextMenus.onClicked.addListener(function (i) {
                    _sendModeRequest(i.menuItemId);
                });
            };
            // Exports
            Cm.create = function () {
                createCm();
                _initCmHandlers();
            };
        })(Cm = Bg.Cm || (Bg.Cm = {}));
    })(Bg = CodeZen.Bg || (CodeZen.Bg = {}));
})(CodeZen || (CodeZen = {}));
