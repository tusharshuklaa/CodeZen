/// <reference path="../dto/codezen.ts" />
var CodeZen;
(function (CodeZen) {
    var Content;
    (function (Content) {
        Content.classPrefix = "_codeZen_mode_";
        Content.elems = function (sel) {
            return document.querySelectorAll(sel);
        };
        Content.elem = function (sel) {
            return this.elems(sel)[0];
        };
        /**
         * Abstract class with open and close methods
         * Can be used like 'FullScreen.open();'
         * @export
         * @class FullScreen
         */
        var FullScreen = /** @class */ (function () {
            function FullScreen() {
            }
            /**
             * Open any element in fullscreen mode
             * If no element is provided, default behaviour is to make body element go full screen
             * @param {CodeZen.IHTMLElementWithFullScreenApi} elem
            */
            FullScreen.open = function (el) {
                if (el === void 0) { el = Content.elem("body"); }
                if (el.requestFullscreen) {
                    el.requestFullscreen();
                }
                else if (el.mozRequestFullScreen) { /* Firefox */
                    el.mozRequestFullScreen();
                }
                else if (el.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
                    el.webkitRequestFullscreen();
                }
                else if (el.msRequestFullscreen) { /* IE/Edge */
                    el.msRequestFullscreen();
                }
            };
            ;
            /**
             * Exits the fullscreen mode if already in full screen mode
             * else do nothing
             *
            */
            FullScreen.close = function () {
                if (this.status()) {
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    }
                    else if (document.mozCancelFullScreen) { /* Firefox */
                        document.mozCancelFullScreen();
                    }
                    else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
                        document.webkitExitFullscreen();
                    }
                    else if (document.msExitFullscreen) { /* IE/Edge */
                        document.msExitFullscreen();
                    }
                }
            };
            /**
             * Tells if the current view is in FUllScreen mode or not
             *
             * @returns {boolean}
            */
            FullScreen.status = function () {
                return !!(document.fullscreenElement ||
                    document.webkitFullscreenElement ||
                    document.mozFullScreenElement ||
                    document.msFullscreenElement);
            };
            return FullScreen;
        }());
        Content.FullScreen = FullScreen;
    })(Content = CodeZen.Content || (CodeZen.Content = {}));
})(CodeZen || (CodeZen = {}));
/// <reference path="../dto/codezen.ts" />
var CodeZen;
(function (CodeZen) {
    var Content;
    (function (Content) {
        var Main;
        (function (Main) {
            var ContextMenuItemId;
            (function (ContextMenuItemId) {
                ContextMenuItemId["mode"] = "mode";
                ContextMenuItemId["changeView"] = "changeView";
                ContextMenuItemId["layout"] = "layout";
                ContextMenuItemId["fav"] = "fav";
            })(ContextMenuItemId = Main.ContextMenuItemId || (Main.ContextMenuItemId = {}));
            var initListeners = function () {
                chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {
                    var reqType = getReqType(request);
                    switch (reqType) {
                        case ContextMenuItemId.mode:
                            Content.Mode.init(request._czMode);
                            break;
                        case ContextMenuItemId.changeView:
                            CodeZen.Content.View.init(request._czMode);
                            break;
                        default:
                            console.log("No request of type:", reqType);
                    }
                    sendResponse({
                        status: "active"
                    });
                });
            };
            var getReqType = function (req) {
                var reqMode = ContextMenuItemId[req._czMode];
                return Object.values(ContextMenuItemId).includes(reqMode) ? reqMode : null;
            };
            // Exports
            Main.init = function () {
                initListeners();
            };
        })(Main = Content.Main || (Content.Main = {}));
    })(Content = CodeZen.Content || (CodeZen.Content = {}));
})(CodeZen || (CodeZen = {}));
CodeZen.Content.Main.init();
/// <reference path="../dto/codezen.ts" />
var CodeZen;
(function (CodeZen) {
    var Content;
    (function (Content) {
        var Mode;
        (function (Mode) {
            var _INIT_EDITOR_PANE_WIDTH = "";
            var mode = {
                "zen": {
                    "id": "zen",
                    "className": Content.classPrefix + "zen"
                },
                "focus": {
                    "id": "focus",
                    "className": Content.classPrefix + "fm"
                },
                "normal": {
                    "id": "normal"
                }
            };
            Mode.init = function (type) {
                var rootElem = Content.elem("html"), editorPane = Content.elem("body.layout-side .top-boxes"), modeClass = _getClassName(type), isInTypeMode = rootElem.classList.contains(modeClass);
                if (!isInTypeMode) {
                    _resetMode(rootElem);
                    if (type.indexOf(mode.normal.id) > -1) {
                        _normalMode(editorPane);
                    }
                    else {
                        _abnormalMode(rootElem, modeClass, editorPane, type);
                    }
                }
            };
            var _resetMode = function (rootElem) {
                rootElem.classList.forEach(function (className) {
                    if (className.startsWith(Content.classPrefix)) {
                        rootElem.classList.remove(className);
                    }
                });
                Content.FullScreen.close();
            };
            var _normalMode = function (editorPane) {
                if (editorPane) {
                    if (_INIT_EDITOR_PANE_WIDTH) {
                        editorPane.style.width = _INIT_EDITOR_PANE_WIDTH;
                    }
                    else {
                        editorPane.style.removeProperty("width");
                    }
                }
            };
            var _abnormalMode = function (rootElem, modeClass, editorPane, type) {
                rootElem.classList.add(modeClass);
                _INIT_EDITOR_PANE_WIDTH = editorPane && editorPane.style.width.indexOf("100%") === -1 ?
                    editorPane.style.width : _INIT_EDITOR_PANE_WIDTH;
                editorPane.style.width = "100%";
                if (type.indexOf(mode.zen.id) > -1) {
                    Content.FullScreen.open();
                }
            };
            var _getClassName = function (type) {
                return type.indexOf(mode.zen.id) > -1 ? mode.zen.className :
                    (type.indexOf(mode.focus.id) > -1 ? mode.focus.className : "");
            };
        })(Mode = Content.Mode || (Content.Mode = {}));
    })(Content = CodeZen.Content || (CodeZen.Content = {}));
})(CodeZen || (CodeZen = {}));
/// <reference path="../dto/codezen.ts" />
var CodeZen;
(function (CodeZen) {
    var Content;
    (function (Content) {
        var View;
        (function (View) {
            var url = document.location.href, domain = "https://codepen.io", URLMeta = url.split(domain)[1], URLDetails = URLMeta.split("/"), userName = URLDetails[1], currView = URLDetails[2], penId = URLDetails[3], view = [
                "pen",
                "details",
                "full",
                "debug",
                "live",
                "collab",
                "professor",
                "pres"
            ];
            var getViewType = function (type) {
                return view.filter(function (v) { return type.indexOf(v) > -1; })[0];
            };
            var goToView = function (view) {
                document.location.href = [domain, userName, view, penId].join("/");
            };
            View.init = function (type) {
                if (type.indexOf(currView) === -1) {
                    var targetView = getViewType(type);
                    goToView(targetView);
                }
            };
        })(View = Content.View || (Content.View = {}));
    })(Content = CodeZen.Content || (CodeZen.Content = {}));
})(CodeZen || (CodeZen = {}));
